// Mocks generated by Mockito 5.0.14 from annotations
// in getx_boilerplate/test/controller/login/login_controller_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:getx_boilerplate/features/domain/entities/request/change_password_request.dart'
    as _i5;
import 'package:getx_boilerplate/features/domain/entities/user.dart' as _i2;
import 'package:getx_boilerplate/features/domain/repositories/auth_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeUser_0 extends _i1.Fake implements _i2.User {}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.User> login(String? email, String? password) =>
      (super.noSuchMethod(Invocation.method(#login, [email, password]),
              returnValue: Future<_i2.User>.value(_FakeUser_0()))
          as _i4.Future<_i2.User>);
  @override
  _i4.Future<void> resetPassword(String? email) =>
      (super.noSuchMethod(Invocation.method(#resetPassword, [email]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> changePassword(_i5.ChangePasswordRequest? request) =>
      (super.noSuchMethod(Invocation.method(#changePassword, [request]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}
